@book{Lof1984,
abstract = {Preface These lectures were given in Padova at the Laboratorio per Ricerche di Dinamica dei Sistemi e di Elettronica Biomedica of the i Consiglio Nazionale delle Ricerche during the month of June 1980. '' I am indebted to Dr. Enrico Pagello of that laboratory for the opportunity},
address = {Napoli},
author = {Löf, Martin},
publisher = {Bibliopolis},
title = {{Intuitionistic type theory}},
year = {1984}
}
@article{howard_1986,
author = {Howard, W A},
doi = {10.2307/2273925},
journal = {Journal of Symbolic Logic},
number = {4},
pages = {1075--1076},
publisher = {Cambridge University Press},
title = {{Per Martin-L{\"{o}}f. Intuitionistic type theory. (Notes by Giovanni Sambin of a series of lectures given in Padua, June 1980.) Studies in proof theory. Bibliopolis, Naples1984, ix 91 pp.}},
volume = {51},
year = {1986}
}
@book{pierce_2005,
abstract = {The study of type systems for programming languages now touches many areas of computer science, from language design and implementation to software engineering, network security, databases, and analysis of concurrent and distributed systems. This book offers accessible introductions to key ideas in the field, with contributions by experts on each topic. The topics covered include precise type analyses, which extend simple type systems to give them a better grip on the run time behavior of systems; type systems for low-level languages; applications of types to reasoning about computer programs; type theory as a framework for the design of sophisticated module systems; and advanced techniques in ML-style type inference. Advanced Topics in Types and Programming Languages builds on Benjamin Pierce's Types and Programming Languages (MIT Press, 2002); most of the chapters should be accessible to readers familiar with basic notations and techniques of operational semantics and type systems — the material covered in the first half of the earlier book. Advanced Topics in Types and Programming Languages can be used in the classroom and as a resource for professionals. Most chapters include exercises, ranging in difficulty from quick comprehension checks to challenging extensions, many with solutions.},
address = {Cambridge, Mass.},
author = {Pierce, Benjamin C},
booktitle = {Advanced Topics in Types and Programming Languages},
doi = {10.7551/mitpress/1104.001.0001},
publisher = {The Mit Press},
title = {{Advanced Topics in Types and Programming Languages}},
year = {2019}
}
@inproceedings{Davies1996,
abstract = {We show that a type system based on the intuitionistic modal logic S4 provides an expressive framework for specifying and analyzing computation stages in the context of typed {\&}lgr;-calculi and functional languages. We directly demonstrate the sense in which our l→{\&}square;e -calculus captures staging, and also give a conservative embeddng of Nielson and Nielson's two-level functional language in our functional language Mini-ML {\&}square; , thus proving that binding-time correctness is equivalent to modal correctness on this fragment. In addition, Mini-ML{\&}square; can also express immediate evaluation and sharing of code across multiple stages, thus supporting run-time code generation as well as partial evaluation.},
author = {Davies, Rowan and Pfenning, Frank},
booktitle = {Conference Record of the Annual ACM Symposium on Principles of Programming Languages},
doi = {10.1145/382780.382785},
issn = {07308566},
month = {may},
number = {3},
pages = {258--270},
title = {{A modal analysis of staged computation}},
url = {http://portal.acm.org/citation.cfm?doid=382780.382785},
volume = {Conference},
year = {1996}
}
@inproceedings{Gluck1995,
abstract = {Multiple program sprcialization can stage a computation into several computation phases. This paper presents an effective solution for multiple program specialization by generating conventional off-line partial evaluation and integrating the "cogen approach" with a multi-level binding-time analysis. This novel "multi-cogen approach" solves two fundamental problems of self-applicable partial evaluation: the generation-time problem and the generator-size problem. The multi-level program generator has been implemented for a higher-order subset of Scheme. Experimental results show a remarkable reduction of generation time and generator size compared to previous attempts of multiple self-application.},
author = {Gl{\"{u}}ck, Robert and J{\o}rgensen, Jesper},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/BFb0026825},
isbn = {354060359X},
issn = {16113349},
pages = {259--278},
publisher = {Springer, Berlin, Heidelberg},
title = {{Efficient multi-level generating extensions for program specialization}},
url = {http://link.springer.com/10.1007/BFb0026825},
volume = {982},
year = {1995}
}
@inproceedings{Davies1996a,
author = {Davies, R.},
booktitle = {Proceedings 11th Annual IEEE Symposium on Logic in Computer Science},
doi = {10.1109/LICS.1996.561317},
isbn = {0-8186-7463-6},
pages = {184--195},
publisher = {IEEE Comput. Soc. Press},
title = {{A temporal-logic approach to binding-time analysis}},
url = {http://ieeexplore.ieee.org/document/561317/},
year = {1996}
}
@article{Pfenning2001,
abstract = {We reconsider the foundations of modal logic, following Martin-L{\"{o}}f's methodology of distinguishing judgments from propositions. We give constructive meaning explanations for necessity and possibility, which yields a simple and uniform system of natural deduction for intuitionistic modal logic that does not exhibit anomalies found in other proposals. We also give a new presentation of lax logic and find that the lax modality is already expressible using possibility and necessity. Through a computational interpretation of proofs in modal logic we further obtain a new formulation of Moggi's monadic metalanguage.$\backslash$n},
author = {Pfenning, Frank and Davies, Rowan},
doi = {10.1017/S0960129501003322},
issn = {14698072},
journal = {Mathematical Structures in Computer Science},
month = {aug},
number = {4},
pages = {511--540},
publisher = {Cambridge University Press},
title = {{A judgmental reconstruction of modal logic}},
url = {http://www.journals.cambridge.org/abstract{\_}S0960129501003322},
volume = {11},
year = {2001}
}
@inproceedings{Pfenning2001a,
abstract = {We develop a uniform type theory that integrates intensionality,$\backslash$nextensionality and proof irrelevance as judgmental concepts. Any object$\backslash$nmay be treated intensionally (subject only to {\&}alpha;-conversion),$\backslash$nextensionally (subject also to {\&}beta;{\&}eta;-conversion), or as irrelevant$\backslash$n(equal to any other object at the same type), depending on where it$\backslash$noccurs. Modal restrictions developed by R. Harper et al. (2000) for$\backslash$nsingle types are generalized and employed to guarantee consistency$\backslash$nbetween these views of objects. Potential applications are in logical$\backslash$nframeworks, functional programming and the foundations of first-order$\backslash$nmodal logics. Our type theory contrasts with previous approaches that, a$\backslash$npriori, distinguished propositions (whose proofs are all identified -$\backslash$nonly their existence is important) from specifications (whose$\backslash$nimplementations are subject to some definitional equalities)},
author = {Pfenning, F.},
booktitle = {Proceedings - Symposium on Logic in Computer Science},
doi = {10.1109/LICS.2001.932499},
isbn = {0-7695-1281-X},
pages = {221--230},
publisher = {IEEE Comput. Soc},
title = {{Intensionality, extensionality, and proof irrelevance in modal type theory}},
url = {http://ieeexplore.ieee.org/document/932499/},
year = {2001}
}
@inproceedings{Hanada2014,
abstract = {We develop yet another typed multi-stage calculus $\lambda$▷{\%}. It extends Tsukada and Igarashi's $\lambda$▷with cross-stage persistence and is equipped with all the key features that MetaOCaml-style multi-stage programming supports. It has an arguably simple, substitution-based full-reduction semantics and enjoys basic properties of subject reduction, confluence, and strong normalization. Progress also holds under an alternative semantics that takes staging into account and models program execution. The type system of $\lambda$▷{\%}gives a sufficient condition when residual programs can be safely generated, making $\lambda$▷{\%}more suitable for writing generating extensions than previous multi-stage calculi. {\textcopyright} 2014 Springer International Publishing.},
author = {Hanada, Yuichiro and Igarashi, Atsushi},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-07151-0_7},
isbn = {9783319071503},
issn = {16113349},
pages = {103--118},
publisher = {Springer, Cham},
title = {{On cross-stage persistence in multi-stage programming}},
url = {http://link.springer.com/10.1007/978-3-319-07151-0{\_}7},
volume = {8475 LNCS},
year = {2014}
}
@book{nordstrom_1990,
author = {Nordström, Bengt and Petersson, Kent and Smith, Jan M},
publisher = {Oxford Universiy Press},
title = {{Programming in Martin-Löf's Type Theory}},
year = {1990}
}
@article{Hakli2011,
abstract = {A proof-theoretical treatment of collectively accepted group beliefs is presented through a multi-agent sequent system for an axiomatization of the logic of acceptance. The system is based on a labelled sequent calculus for propositional multi-agent epistemic logic with labels that correspond to possible worlds and a notation for internalized accessibility relations between worlds. The system is contraction- and cut-free. Extensions of the basic system are considered, in particular with rules that allow the possibility of operative members or legislators. Completeness with respect to the underlying Kripke semantics follows from a general direct and uniform argument for labelled sequent calculi extended with mathematical rules for frame properties. As an example of the use of the calculus we present an analysis of the discursive dilemma. {\textcopyright} 2011 Springer Science+Business Media B.V.},
author = {Hakli, Raul and Negri, Sara},
doi = {10.1007/s10992-011-9188-0},
file = {:Users/katshun/Library/Application Support/Mendeley Desktop/Downloaded/Hakli, Negri - 2011 - Reasoning About Collectively Accepted Group Beliefs.pdf:pdf},
issn = {00223611},
journal = {Journal of Philosophical Logic},
keywords = {Acceptance logic,Group belief,Labelled sequent calculus,Proof analysis},
month = {aug},
number = {4},
pages = {531--555},
title = {{Reasoning About Collectively Accepted Group Beliefs}},
volume = {40},
year = {2011}
}
@article{Kawata2019,
abstract = {We study a dependently typed extension of a multi-stage programming language a la MetaOCaml, which supports quasi-quotation and cross-stage persistence for manipulation of code fragments as first-class values and eval for the execution of programs dynamically generated by the code manipulation. Dependent types are expected to bring to multi-stage programming enforcement of strong invariants---beyond simple type safety---on the behavior of dynamically generated code. An extension is, however, not trivial because a type system would have to take stages---roughly speaking, the number of surrounding quotations---of types into account. To rigorously study properties of such an extension, we develop lambda{\^{}}{\{}MD{\}}, which is an extension of Hanada and Igarashi's typed calculus lambda{\^{}}{\{}$\backslash$triangleright$\backslash${\%}{\}} with dependent types, and prove its properties including preservation, confluence, strong normalization for full reduction, and progress for staged reduction. Motivated by code generators such that the type of generated code depends on a value from outside of quotations, we argue the significance of cross-stage persistence in dependently typed multi-stage programming and certain type equivalence that is not directly derived from reduction rules.},
archivePrefix = {arXiv},
arxivId = {1908.02035},
author = {Kawata, Akira and Igarashi, Atushi},
eprint = {1908.02035},
file = {:Users/katshun/Library/Application Support/Mendeley Desktop/Downloaded/Kawata, Igarashi - 2019 - A Dependently Typed Multi-Stage Calculus.pdf:pdf},
month = {aug},
title = {{A Dependently Typed Multi-Stage Calculus}},
url = {http://arxiv.org/abs/1908.02035},
year = {2019}
}
